#!/bin/sh

# Variables and functions designed to be overridden by the user
# -------------------------------------------------------------

# Version of Scala to be used in compilation and in resolution of libraries
scala_version="${scala_version:-2.12.13}"

# Source files/directories
# if not set explicitly, it's being set to ${script_file} further down
# (by default only the main script belongs to the sources)
sources="${sources:-}"

# Dependency list specification
dependencies="${dependencies:-}"

# List of custom artifact repository URLs
repositories="${repositories:-}"

# List of artifacts in explicitly stated versions that are to be used
# instead of the results of the automatic dependency resolution process.
forced_versions="${forced_versions:-}"

# List of exclusions (Coursier's option: --exclude | -E  <organization:name>)
exclusions="${exclusions:-}"

# Name of the main class (script entrypoint).
# If not given it's assumed to be `package.name.used.in.the.first.package.statement.ScriptFileNameWithoutScalaExtension`
# (in other words, you can rely on the default if you name your main class the same as the script file and ensure it has `main` method)
main_class="${main_class:-}"

# Whether to compile the script into a native binary for rapid execution and low memory footprint.
# Producing of the native image may be a slow operation so it makes sense to set this option to `false`
# during all change-intensive periods of script development (for example at the beginning)
# and to switch it to `true` after the script is deemed "ready".
native="${native:-false}"

# TSK only ever outputs its diagnostic information to standard error, so your script's standard output stays unpolluted.
# The verbosity can be fined tuned by setting the `verbose` variable to:
#
# - false - output log to standard error only on TSK failure, don't output anything if all goes well
# - just_progress (default) - output just the information about download progress, or everything if an error happened
# - true - output all diagnostic information to the standard error in the real time
verbose="${verbose:-just_progress}"

# Version of Coursier, the workhorse for JVM and library fetching
coursier_version="${coursier_version:-v2.0.16}"

# Version of Java Virtual Machine, necessary to launch Bloop and (after compilation) the script itself
# A value of `system` prevents TSK from trying to download a JVM and expects an existing JVM to be available.
# Once you have Coursier installed you can use `coursier java --available` to get a list of installable runtimes.
java_version="${java_version:-$(command -v java > /dev/null 2>&1 && echo "system" || echo "8")}"

# Version of Java used at Alpine in order to bootstrap Coursier
java_alpine="${java_alpine:-openjdk8-jre}"

# Version of Bloop, a fast and well-integrated Scala compilation tool
bloop_version="${bloop_version:-2.12:1.4.8}"

# Version of GraalVM used to produce native binary of the script
graalvm_version="${graalvm_version:-21.0.0}"

# Variables and functions internal to tsk
# ---------------------------------------
tsk_log="${tsk_log:-${TMPDIR:-"/tmp"}/tsk-$$.log}"

# shellcheck disable=SC2001
case "${scala_version}" in
  *RC*)
    scala_binary_version="${scala_version}"
    ;;
  *M*)
    scala_binary_version="${scala_version}"
    ;;
  2*)
    scala_binary_version="$(echo "${scala_version}" | sed 's/\([0-9]*\.[0-9]*\)\..*/\1/g')"
    ;;
  3*)
    scala_binary_version="$(echo "${scala_version}" | sed 's/\([0-9]*\)\..*/\1/g')"
    ;;
esac

fatal_error() {
  echo >&2 "FATAL ERROR: $*"
}

log_as() {
  case "${verbose}" in
    "false")
      tee -a "${tsk_log}" > /dev/null
      ;;
    "just_progress")
      local log_level="${1}"
      local log_target
      log_target="$([ "${log_level}" = "progress" ] && echo "/dev/stderr" || echo "/dev/null")"
      tee -a "${tsk_log}" "${log_target}" > /dev/null
      ;;
    "true")
      tee -a "${tsk_log}" /dev/stderr > /dev/null
      ;;
    *)
      tee -a "${tsk_log}" /dev/stderr > /dev/null
      ;;
  esac
}

log_fatal() {
  echo "FATAL ERROR: $*" | log_as fatal
}

log_debug() {
  echo "$*" | log_as debug
}

# "Safe sourcing" is the current answer to the question:
# "how to just load the settings (dependencies, other variables) from the script file
# without running the script nor executing any side effects?"
# Under some assumptions the script can be safely sourced thanks to some command aliasing.
# All unsafe commands that are common in preambles (source, ., cat, curl, wget, sh)
# are aliased to a no-op action (/usr/bin/true) and the commands that start the script
# (and some top-level Scala keywords) are aliased to `return`
# so sourcing of script stops after the interesting part (variables) is set.
#
# A consequence is that the settings part needs to be quite dumb, as it can't count
# on the mentioned programs to work.
safely_source() {
  tsk_user_settings_tmp="${TMPDIR:-"/tmp"}/tsk-$$.settings"
  {
    echo 'shopt -s expand_aliases'
    for cmd in . source cat curl wget sh; do echo "alias $cmd=true"; done
    for cmd in . run_with_ammonite run package import object case class trait implicit private; do echo "alias $cmd='return 0'"; done
    cat "${1}"
  } > "${tsk_user_settings_tmp}"

  # shellcheck disable=SC1090
  . "${tsk_user_settings_tmp}" || {
    echo >&2 "Sourcing of settings failed, please inspect the settings file below:"
    cat >&2 "${tsk_user_settings_tmp}"
  }
  rm "${tsk_user_settings_tmp}"

  # For now the debug mode (safe sourcing) will be restricted to Bash only
  # shellcheck disable=SC2039
  shopt -u expand_aliases
  unalias . source cat curl wget sh
  unalias run_with_ammonite run
  unalias package import object case class trait implicit private
}

# The alternative way of sourcing the TSK (~/.tsk/tsk-x.y.z Foo.scala)
# mainly serves debugging purposes as you are able to check output of the individual functions
script_file="$(echo "$0" | grep -q '\.sca\?l\?a\?$' && echo "${0}" || echo "${1}")"
[ -e "${script_file}" ] || (
  fatal_error \
    "tsk must be sourced in one of two supported ways:
1) from within a *.scala/*.sc file (normal operation) or
2) with a *.scala/*.sc file argument (. ~/.tsk/tsk-x.y.z Foo.scala) - for debugging

instead found: [${script_file}]
the arguments were: [$0 $*]"
  sleep 3600
  return 1
)
if echo "$0" | grep -vq '\.sca\?l\?a\?$'; then
  safely_source "${script_file}"
fi

sources="${sources:-${script_file}}"

get_abs_script_dir() {
  cd "${script_dir}" || (
    fatal_error "Can't cd to the script directory, symbolic links not supported (yet?)"
    return 1
  )
  pwd -P
}

script_dir="$(dirname "${script_file}")"
abs_script_dir="$(get_abs_script_dir)"
abs_source_patterns() {
  echo "${sources}" | awk "BEGIN { RS=\"[ \\t\\n]+\" }
    /^.+\$/ { print \"${abs_script_dir}/\" \$1}"
}
get_abs_sources() {
  for source_entry in $(abs_source_patterns); do
    echo "${source_entry}"
  done | sort -u | grep -v '[^\]\*' | grep -v -F "${script_file}"
}
all_sources_json_array() {
  echo "[ $(get_abs_sources | sed 's/\(.*\)/"\1",/g')
          \"$(get_abs_script_dir)/$(basename "${script_file}")\" ]"
}


os=$(uname)
td=~/.tsk
mkdir -p "$td" > /dev/null 2>&1 || {
  fatal_error "Directory '${td}' is required by script to be run.
Make sure you have sufficient access rights and that no file with this name exists already."
  exit 1
}
# work around https://github.com/coursier/coursier/issues/1856
# shellcheck disable=SC2001
bloop_binary="${td}/bloop-$(echo "${bloop_version}" | sed 's/:/_/g')"
cs_binary="${td}/cs-${coursier_version}$([ "system" = "${java_version}" ] && echo "-jvmless" || echo "-${os}")"
cs_cmd="${cs_binary} ${COURSIER_OPTS:-}"
get_sha_sum() {
  if command -v sha256sum > /dev/null 2>&1; then
    sha256sum
  else
    shasum -a 256
  fi
}

cached_cs_java_home=""
cached_cs_graalvm_home=""
cached_p_with_custom_java=""
p_with_custom_java() {
  [ -z "$cached_p_with_custom_java" ] &&
    cached_p_with_custom_java="${cached_cs_java_home}/bin:${PATH}"
  echo "$cached_p_with_custom_java"
}

download_as=$(command -v wget > /dev/null && echo "wget -O" || echo "curl -fLo")
module="$(basename "${script_file}" | sed 's/\.scala//g')"
os=$(uname)

# bloop and coursier internals
bloop_dir="${script_dir}/.bloop"
bloop_module_config="${bloop_dir}/${module}.json"
tsk_meta="${bloop_dir}/${module}/tsk"
mkdir -p "${tsk_meta}" > /dev/null 2>&1
cs_fetch_result="${tsk_meta}/cs_fetch.result"
native_image_input_summary_file="${tsk_meta}/native_image_inputs.sha"
compilation_input_summary_file="${tsk_meta}/compilation_inputs.sha"
native_image="${tsk_meta}/binary"

classpath_root="${bloop_dir}/${module}/bloop-bsp-clients-classes/classes-bloop-cli"

as_string_array_elements() {
  sed 's/\(.*\)/"\1",/g;$s/",$/"/g'
}

case "${scala_version}" in
  2*)
    scala_compiler="org.scala-lang:scala-compiler:${scala_version}"
    scala_library="org.scala-lang:scala-library:${scala_version}"
    ;;
  3*)
    scala_compiler="org.scala-lang:scala3-compiler_${scala_binary_version}:latest.release"
    scala_library="org.scala-lang:scala3-library_${scala_binary_version}:latest.release"
    ;;
  *)
    fatal_error "Sorry, Scala version [${scala_version}] is not supported by TSK"
    return 1
    ;;
esac

compiler_deps="
    ${scala_compiler}
    ${scala_library}

    jline:jline:2.14.6
"

cs_fetch() {
  # shellcheck disable=SC2046
  # (the whole point is to make shell split the repositories and forced versions by words here)
  ${cs_cmd} fetch -q \
    --scala-version "${scala_version}" \
    $(for repo in ${repositories}; do echo "-r ${repo}"; done) \
    $(for ver in ${forced_versions}; do echo "--force-version ${ver}"; done) \
    $(for org_artifact in ${exclusions}; do echo "--exclude ${org_artifact}"; done) \
    $*
}

install_java() {
  [ -n "${cached_cs_java_home}" ] && return 0
  temp_file="${TMPDIR:-"/tmp"}/tsk-$$-java-home"
  ${cs_cmd} java-home --jvm "${java_version}" --mode offline > "${temp_file}" 2>&1
  result=$?
  if [ $result -ne 0 ]; then
    echo "Installing Java Virtual Machine" | log_as progress
    ${cs_cmd} java-home --jvm "${java_version}" --progress 2>&1 > "${temp_file}" | log_as progress
  fi
  result=$?
  if [ $result -eq 0 ]; then
    cached_cs_java_home=$(cat "${temp_file}")
  fi
  rm "${temp_file}"
  return $result
}

install_graalvm() {
  [ -n "${cached_cs_graalvm_home}" ] && return 0
  temp_file="${TMPDIR:-"/tmp"}/tsk-$$-graalvm-home"
  ${cs_cmd} java-home --jvm graalvm:${graalvm_version} --mode offline > "${temp_file}" 2>&1;
  result=$?
  if [ $result -ne 0 ]; then
    echo "Installing GraalVM" | log_as progress
    ${cs_cmd} java-home --jvm graalvm:${graalvm_version} --progress 2>&1 > "${temp_file}" | log_as progress
  fi
  result=$?
  if [ $result -eq 0 ]; then
    cached_cs_graalvm_home=$(cat "${temp_file}")
  fi
  rm "${temp_file}"
  return $result
}

install_native_image_generator() {
  [ -e "${cached_cs_graalvm_home}/bin/native-image" ] && return 0
  echo "Installing GraalVM native-image utility" | log_as progress
  "${cached_cs_graalvm_home}/bin/gu" install native-image 2>&1 > /dev/null | log_as progress
}

install_coursier() {
  [ -e "$cs_binary" ] && return 0
  cs_url_prefix="https://github.com/coursier/coursier/releases/download/${coursier_version}"
  case "${os}/java-${java_version}" in
    *"/java-system")
      # When using java_version=system, just download the smallest coursier shell without JVM.
      cs_url="${cs_url_prefix}/coursier"
      command -v java > /dev/null 2>&1 || {
        log_fatal "Using jvm-less coursier but no system java present. Please install java first"
        return 1
      }
      ;;
    "Linux"*)
      case "$(ldd /bin/sh | awk '/libc/ {print $1}' | sed 's/-.*//g')" in
        "libc.musl")
          # Coursier isn't compiled against libc.musl yet (Alpine uses it), need to either have java already
          # or to have root permissions
          if ! command -v java > /dev/null 2>&1; then
            if [ "$(whoami)" = "root" ]; then
              echo "Installing Java for Coursier" | log_as progress
              { apk update && apk add "${java_alpine}"; } 2>&1 | log_as progress
            else
              log_fatal "No java present and no root user, which could install it"
              return 1
            fi
          fi
          cs_url="${cs_url_prefix}/coursier"
          ;;
        "libc.so.6")
          cs_url="${cs_url_prefix}/cs-x86_64-pc-linux"
          ;;
      esac
      ;;
    "Darwin"*)
      cs_url="${cs_url_prefix}/cs-x86_64-apple-darwin"
      ;;
    *)
      cs_url="${cs_url_prefix}/coursier"
      command -v java > /dev/null 2>&1 || {
        log_fatal "Unknown system: ${os} and no java present. Please install java first"
        return 1
      }
      ;;
  esac
  echo "Installing Coursier" | log_as progress
  ${download_as} "$cs_binary" "$cs_url" 2>&1 | log_as progress
  chmod +x "$cs_binary"
}

install_bloop() {
  [ -e "${bloop_binary}" ] && return 0
  echo "Installing Bloop" | log_as progress
  # First try to install bloop prebuilt binary (~4k) otherwise simply bootstrap (~30M) with coursier.
  # The prebuilt binary is preferred since it will be faster since coursier bootstrapped binaries DO perform JVM startup.
  (install_bloop_prebuilt || install_bloop_bootstrapped) 2>&1 | log_as progress
}

install_bloop_prebuilt() {
  ${cs_cmd} install "bloop:$(echo "${bloop_version}" | sed 's/.*://g')" --only-prebuilt=true --install-dir "${td}" &&
    mv "${td}/bloop" "${bloop_binary}"
}

install_bloop_bootstrapped() {
  # Normally we should install the latest stable like below, but it seems to have troubles at the time of writing it
  # $cs_cmd bootstrap bloop --standalone -o "${bloop_binary}"
  PATH="$(p_with_custom_java)" ${cs_cmd} bootstrap \
    "ch.epfl.scala:bloopgun_${bloop_version}" --standalone -o "${bloop_binary}"
}

build_inputs() {
  echo "${coursier_version}"
  echo "${bloop_version}"
  echo "${repositories}"
  echo "${sources}"
  echo "${dependencies}"
  echo "${forced_versions}"
  echo "${exclusions}"
  echo "${scala_version}"
  echo "${HOME}"
  echo "${abs_script_dir}"
}

all_inputs() {
  build_inputs
  get_abs_sources | while read -r f; do echo "${f}"; done
  cat "${script_file}"
}

build_inputs_sha() {
  build_inputs | get_sha_sum | tr -d ' -'
}

all_inputs_sha() {
  all_inputs | get_sha_sum | tr -d ' -'
}

bloop_config_template() {
  # shellcheck disable=SC2002
  cat << EOF
{
    "tsk_build_inputs_sha": "$(build_inputs_sha)",
    "version": "1.4.0",
    "project": {
        "name": "${module}",
        "directory": "${abs_script_dir}",
        "workspaceDir": "${abs_script_dir}",
        "sources": $(all_sources_json_array),
        "dependencies": [
        ],
        "classpath": [
            $(cs_fetch --default "${dependencies}" "${scala_library}" | as_string_array_elements)
        ],
        "out": "${abs_script_dir}/.bloop/${module}",
        "classesDir": "${abs_script_dir}/.bloop/${module}/scala-${scala_binary_version}/classes",
        "resources": [],
        "scala": {
            "organization": "org.scala-lang",
            "name": "scala-compiler",
            "version": "${scala_version}",
            "options": [

            ],
            "jars": [
                $(cs_fetch "${compiler_deps}" | as_string_array_elements)
            ],
            "analysis": "${abs_script_dir}/.bloop/${module}/inc_compile_${scala_binary_version}.zip",
            "setup": {
                "order": "mixed",
                "addLibraryToBootClasspath": true,
                "addCompilerToClasspath": false,
                "addExtraJarsToClasspath": false,
                "manageBootClasspath": true,
                "filterLibraryFromClasspath": true
            }
        },
        "java": {
            "options": [

            ]
        },
        "test": {
            "frameworks": [ ],
            "options": {
                "excludes": [ ],
                "arguments": [ ]
            }
        },
        "resolution": {
            "modules": [ $(cat "${cs_fetch_result}" | cs_report_0_1_0_to_bloop_resolution_modules) ]
        },
        "tags": [
            "library"
        ]
    }
}
EOF
}

fetch_all_dependencies() {
  fetch_all() {
    # shellcheck disable=SC2086
    # (all dependencies need to be passed space-separated so shell word splitting is fine here)
    cs_fetch --sources --javadoc --default --progress \
      ${compiler_deps} ${dependencies} --json-output-file "${cs_fetch_result}" "${@}"
  }
  fetch_all --mode offline > /dev/null 2>&1 && return 0
  echo "Fetching all libraries the script depends upon" | log_as progress
  # shellcheck disable=SC2069
  # (we want to pipe stderr alone, discarding stdout)
  fetch_all 2>&1 > /dev/null | log_as progress
}

generate_bloop_config() {
  if grep -q "tsk_build_inputs_sha.*$(build_inputs_sha)" "${bloop_module_config}" 2> /dev/null; then
    # good, config can stay
    true
  else
    fetch_all_dependencies || return 1
    log_debug "Generating Bloop config"
    bloop_config_template > "${bloop_module_config}"
  fi
}

unjsonize_cs_report() {
  sed 's/"file":"\?/\nFILE /g
       s/"coord":"/\nCOORD /g
       s/,/\n/g
       s/"/\n/g'
}

just_file_and_coords() {
  grep -e FILE -e COORD
}

strip_file_and_coords_markers() {
  sed 's/FILE //g
         s/COORD //g'
}

artifact_info_as_tsv() {
  awk -F: '{
    group=$1
    artifact=$2
    version=$3

    getline
    path=$1

    if (path != "null") {
      gsub(/.jar$/, "", path)

      jar_path=(path ".jar")
      javadoc_path=(path "-javadoc.jar")
      sources_path=(path "-sources.jar")
      print(group, artifact, version, jar_path, javadoc_path, sources_path)
    }
  }'
}

prepare_native_binary() {
  [ "${native}" = "false" ] && return 0
  grep -q "$(all_inputs_sha)" "${native_image_input_summary_file}" 2> /dev/null && return 0
  install_graalvm || (
    log_fatal "Could not install GraalVM"
    return 1
  )
  install_native_image_generator || (
    log_fatal "Could not install native-image utility"
    return 1
  )
  echo "Building native image" | log_as progress
  (
    "$(cs_graalvm_home)"/bin/native-image \
      -cp "$(script_classpath)" \
      --install-exit-handlers \
      -H:Class="$(get_main_class)" \
      -H:+ReportExceptionStackTraces \
      --static \
      --allow-incomplete-classpath \
      --report-unsupported-elements-at-runtime \
      --enable-url-protocols=https,http \
      --enable-all-security-services \
      --initialize-at-build-time="scala.Symbol,scala.Function1,scala.Function2,scala.runtime.StructuralCallSite,scala.runtime.EmptyMethodCache,scala.runtime.Statics\$VM" \
      --no-fallback "$(get_main_class)" "${native_image}" 2>&1 | log_as progress
  ) && (all_inputs_sha > "${native_image_input_summary_file}")
}

cs_report_0_1_0_to_bloop_resolution_modules() {
  unjsonize_cs_report |
    just_file_and_coords |
    strip_file_and_coords_markers |
    artifact_info_as_tsv | (
    after_first="false"
    while read -r group artifact version jar_path javadoc_path sources_path; do
      [ "${after_first}" = "true" ] && echo ","
      cat << EOF
                {
                    "organization": "${group}",
                    "name": "${artifact}",
                    "version": "${version}",
                    "configurations": "default",
                    "artifacts": [
                        {
                            "name": "${artifact}",
                            "path": "${jar_path}"
                        },
                        {
                            "name": "${artifact}",
                            "classifier": "sources",
                            "path": "${sources_path}"
                        },
                        {
                            "name": "${artifact}",
                            "classifier": "javadoc",
                            "path": "${javadoc_path}"
                        }
                    ]
                }
EOF
      after_first="true"
    done
  )
}

prepare_java() {
  install_coursier || {
    log_fatal "Could not install Coursier"
    return 1
  }
  install_java || {
    log_fatal "Could not install Java Virtual Machine"
    return 1
  }
}

prepare_for_running_with_bloop() {
  prepare_java || {
    log_fatal "Could not install Java"
    return 1
  }
  install_bloop || {
    log_fatal "Could not install Bloop"
    return 1
  }
  mkdir -p "${bloop_dir}" || {
    log_fatal "Could not create .bloop directory"
    return 1
  }
  generate_bloop_config || {
    log_fatal "Could not generate Bloop configuration"
    return 1
  }
  grep -q "$(all_inputs_sha)" "${compilation_input_summary_file}" 2> /dev/null && return 0
  PATH="$(p_with_custom_java)" "${bloop_binary}" about > /dev/null 2>&1 || {
    fatal_error "Error while pre-warming Bloop"
    return 1
  }
  (
    (
      PATH="$(p_with_custom_java)" "${bloop_binary}" compile --config-dir "${script_dir}/.bloop" "${module}" 2>&1 | log_as progress
    ) && (all_inputs_sha > "${compilation_input_summary_file}")
  ) || {
    fatal_error "Error while compiling with Bloop"
    return 1
  }
}

script_classpath() {
  echo "$(
    cs_fetch --default "${scala_library}" "${dependencies}" |
      sort -ds |
      awk '{printf("%s:", $0)}'
  )${classpath_root}"
}

get_package() {
  awk '/^ *package/ { print $2 "." }' "${script_file}" | head -n 1
}

detect_main_class() {
  PATH="$(p_with_custom_java)" javap "${classpath_root}/$(get_package | tr . /)"*.class |
    tr -d "\n\r" |
    sed 's/Compiled from/\r\nCompiled from/g' |
    grep -F 'public static void main(java.lang.String[])' |
    sed 's/.*class //g' |
    sed 's/ .*//g'
}

get_main_class() {
  if [ -z "${main_class}" ]; then
    detect_main_class
  else
    echo "${main_class}"
  fi
}

exec_java() {
  # shellcheck disable=SC2086
  # JAVA_OPTS can be multiple -D things, we want to pass all separately
  PATH="$(p_with_custom_java)" exec java -cp "$(script_classpath)" ${JAVA_OPTS:-} "$(get_main_class)" "$@"
}

install_ammonite() {
  ${cs_cmd} fetch ammonite --mode offline > /dev/null 2>&1 && return 0
  echo "Installing Ammonite" | log_as progress
  ${cs_cmd} fetch ammonite --progress 2>&1 > /dev/null | log_as progress
}

exec_ammonite() {
  PATH="$(p_with_custom_java)" exec ${cs_cmd} launch ammonite -- "${script_file}" "$@"
}

show_log_and_quit() {
  if [ "${verbose}" != "true" ]; then
    echo >&2
    echo >&2 Full log:
    echo >&2 ---------
    cat >&2 "${tsk_log}"
  fi
  rm "${tsk_log}" 2> /dev/null
  exec false
}

run() {
  set -o pipefail
  if prepare_for_running_with_bloop && prepare_native_binary; then
    rm "${tsk_log}" 2> /dev/null
    grep -q "$(all_inputs_sha)" "${native_image_input_summary_file}" 2> /dev/null &&
      eval "$(printf "%s" "exec \"${native_image}\" $(
        seq "${argc}" | awk '{printf "\"$arg_" $1 "\" "}'
      )")"
    eval "$(printf "%s" "exec_java $(
      seq "${argc}" | awk '{printf "\"$arg_" $1 "\" "}'
    )")"
  else
    show_log_and_quit
  fi
}

run_with_ammonite() {
  set -o pipefail
  if install_coursier && install_ammonite; then
    rm "${tsk_log}" 2> /dev/null
    eval "$(printf "%s" "exec_ammonite $(
      seq "${argc}" | awk '{printf "\"$arg_" $1 "\" "}'
    )")"
  else
    show_log_and_quit
  fi
}

# Working around ash (Alpine) lack of arrays, to let use simply write `run`
# capturing the parameters in order to use it in exec_java
i=1
argc="$#"
# arg is used within eval
# shellcheck disable=SC2034
for arg in "$@"; do
  eval "arg_$i=\"\${arg}\""
  i=$((i + 1))
done
unset i
